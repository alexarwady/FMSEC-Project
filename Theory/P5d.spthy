theory P5d
begin

builtins: symmetric-encryption, hashing, diffie-hellman

functions: mac/2, kdf/3, map/2

equations: mac(m, k) = senc(m, k)

// pre-shared key distribution
rule Register_psk:
  [ Fr(~k) ]
  -->
  [ !Psk($A, $B, ~k)] 

rule Reveal_pskA:
  [ !Psk(A, B, k) ] --[ Reveal(A) ]-> [ Out(k) ]

rule Reveal_pskB:
  [ !Psk(A, B, k) ] --[ Reveal(B) ]-> [ Out(k) ]

/* We formalize the following protocol
  protocol {
    1. A -> B: g^x, [s]h(k(A,B)), p
    1. A <- B: g^y
    2. A -> B: [g^y]Kab
    2. A <- B: [g^x]Kab
  }
*/

rule A_Init:
  [ Fr(~id), 
  !Psk(A, B, k)] 
  --[Create(~id, 'I')]-> 
  [ St_A_0(A, ~id, B, k) ]

rule B_Init:
  [ Fr(~id), 
  !Psk(A, B, k)] 
  --[Create(~id, 'R')]-> 
  [ St_B_0(B, ~id, A, k) ]

rule A_Send_gx_s_p:
  let g = map(~s, $p) in
  [ Fr(~x), Fr(~s), St_A_0(A, id, B, k) ] --> [ St_A_1(A, id, B, k, ~x, ~s, $p), Out(<g^~x, senc(~s, h(k)), $p>) ]

rule B_Rec_gx_s_p:
  let g = map(s, $p) in
  [ St_B_0(B, id, A, k), In(<gx, senc(s, h(k)), $p>) ] --> [ St_B_1(B, id, A, k, gx, s, $p) ]
  
rule B_Send_gy:
  let Kab = h(gx^~y)
      g = map(s, $p)
  in
  [ Fr(~y), St_B_1(B, id, A, k, gx, s, $p) ] 
  --[ Running(B, A, <'I', 'R', <gx, g^~y, Kab>>), DiffieHellmanDiff(A, B, gx, g^~y) ]-> 
  [ St_B_2(B, id, A, k, gx, s, $p, ~y, Kab), Out(g^~y) ]
  
rule A_Rec_gy:
  let Kab = h(gy^x)
      g = map(s, $p)
  in
  [ St_A_1(A, id, B, k, x, s, $p), In(gy) ] --> [ St_A_2(A, id, B, k, x, s, $p, gy, Kab) ]
  
rule A_Send_mac_gy:
  let g = map(s, $p) in
  [ St_A_2(A, id, B, k, x, s, $p, gy, Kab) ] 
  --[ Running(A, B, <'R', 'I', <g^x, gy, Kab>>), DiffieHellmanDiff(A, B, g^x, gy) ]-> 
  [ St_A_3(A, id, B, k, x, s, $p, gy, Kab), Out(mac(gy, Kab)) ]
  
rule B_Rec_mac_gy:
  let g = map(s, $p) in
  [ St_B_2(B, id, A, k, gx, s, $p, y, Kab), In(mac(g^y, Kab)) ]
  --[ Commit(B, A, <'R', 'I', <gx, g^y, Kab>>) , Honest(B) , Honest(A), Secret(B, Kab) ]->
  [ St_B_3(B, id, A, k, gx, s, $p, y, Kab) ]

rule B_Send_mac_gx:
  let g = map(s, $p) in
  [ St_B_3(B, id, A, k, gx, s, $p, y, Kab) ] 
  --[ Finish(B, A, 'R', k, gx, g^y, Kab)]->
  [ St_B_4(B, id, A, k, gx, s, $p, y, Kab) , Out(mac(gx, Kab)) ]

rule A_Rec_mac_gx:
  let g = map(s, $p) in
  [ St_A_3(A, id, B, k, x, s, $p, gy, Kab), In(mac(g^x, Kab)) ]
  --[ Commit(A, B, <'I', 'R', <g^x, gy, Kab>>), Honest(A), Honest(B), Finish(A, B, 'I', k, g^x, gy, Kab), Secret(A, Kab) ]->
  [ St_A_4(A, id, B, k, x, s, $p, gy, Kab) ]
  
restriction Different_gx_gy:
  "All a b gx gy #i.
    DiffieHellmanDiff(a, b, gx, gy) @i
    & gx = gy
      ==> F"

// This lemma gets verified
lemma executable:
  exists-trace
    "Ex a b gx gy k Kab #i #j.
      Finish(a, b, 'I', k, gx, gy, Kab) @i
      & Finish(b, a, 'R', k, gx, gy, Kab) @j
      & (All id1 id2 #k1 #k2. Create(id1, 'I') @k1 & Create(id2, 'I') @k2 ==> id1 = id2)
      & (All id1 id2 #k1 #k2. Create(id1, 'R') @k1 & Create(id2, 'R') @k2 ==> id1 = id2)
      & not(a = b)
      & not(Ex X #k. Reveal(X)@k)"

// This lemma gets verified
lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma gets verified
lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma gets verified
lemma secrecy:
  "All A x #i.
    Secret(A,x) @i ==>
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma gets verified        
lemma secrecy_PFS:
  "All A x #i.
    Secret(A,x) @i ==>
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i & r < i)"

end
