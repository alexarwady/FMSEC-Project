theory P5ab begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, kdf/3, mac/2, map/2, pair/2, sdec/2, senc/2,
           snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    mac(m, k) = senc(m, k),
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Register_psk:
   [ Fr( ~k ) ] --> [ !Psk( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_pskA:
   [ !Psk( A, B, k ) ] --[ Reveal( A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_pskB:
   [ !Psk( A, B, k ) ] --[ Reveal( B ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_Init:
   [ Fr( ~id ), !Psk( A, B, k ) ]
  --[ Create( ~id, 'I' ) ]->
   [ St_A_0( A, ~id, B, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_Init:
   [ Fr( ~id ), !Psk( A, B, k ) ]
  --[ Create( ~id, 'R' ) ]->
   [ St_B_0( B, ~id, A, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_Send_gx_s_p:
   [ Fr( ~x ), Fr( ~s ), St_A_0( A, id, B, k ) ]
  -->
   [
   St_A_1( A, id, B, k, ~x, ~s, $p ),
   Out( <map(~s, $p)^~x, senc(~s, h(k)), $p> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_Rec_gx_s_p:
   [ St_B_0( B, id, A, k ), In( <gx, senc(s, h(k)), $p> ) ]
  -->
   [ St_B_1( B, id, A, k, gx, s, $p ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_Send_gy:
   [ Fr( ~y ), St_B_1( B, id, A, k, gx, s, $p ) ]
  --[ Running( B, A, <'I', 'R', gx, map(s, $p)^~y, h(gx^~y)> ) ]->
   [
   St_B_2( B, id, A, k, gx, s, $p, ~y, h(gx^~y) ),
   Out( map(s, $p)^~y )
   ]

  /*
  rule (modulo AC) B_Send_gy:
     [ Fr( ~y ), St_B_1( B, id, A, k, gx, s, $p ) ]
    --[ Running( B, A, <'I', 'R', gx, map(s, $p)^~y, h(z)> ) ]->
     [ St_B_2( B, id, A, k, gx, s, $p, ~y, h(z) ), Out( map(s, $p)^~y )
     ]
    variants (modulo AC)
    1. ~y    = ~y.24
       gx    = gx.27
       z     = gx.27^~y.24
    
    2. ~y    = ~y.25
       gx    = z.32^inv(~y.25)
       z     = z.32
    
    3. ~y    = ~y.146
       gx    = x.288^x.289
       z     = x.288^(~y.146*x.289)
    
    4. ~y    = ~y.149
       gx    = x.294^inv((~y.149*x.295))
       z     = x.294^inv(x.295)
    
    5. ~y    = ~y.149
       gx    = x.294^(x.295*inv(~y.149))
       z     = x.294^x.295
    
    6. ~y    = ~y.150
       gx    = x.295^(x.296*inv((~y.150*x.297)))
       z     = x.295^(x.296*inv(x.297))
  */

rule (modulo E) A_Rec_gy:
   [ St_A_1( A, id, B, k, x, s, $p ), In( gy ) ]
  -->
   [ St_A_2( A, id, B, k, x, s, $p, gy, h(gy^x) ) ]

  /*
  rule (modulo AC) A_Rec_gy:
     [ St_A_1( A, id, B, k, x, s, $p ), In( gy ) ]
    -->
     [ St_A_2( A, id, B, k, x, s, $p, gy, h(z) ) ]
    variants (modulo AC)
     1. gy    = gy.10
        x     = x.10
        z     = gy.10^x.10
    
     2. gy    = gy.10
        x     = one
        z     = gy.10
    
     3. gy    = x.10^x.11
        x     = x.12
        z     = x.10^(x.11*x.12)
    
     4. gy    = x.10^x.11
        x     = inv(x.11)
        z     = x.10
    
     5. gy    = x.10^x.11
        x     = inv((x.11*x.15))
        z     = x.10^inv(x.15)
    
     6. gy    = x.10^x.11
        x     = (x.15*inv(x.11))
        z     = x.10^x.15
    
     7. gy    = x.10^x.11
        x     = (x.15*inv((x.11*x.16)))
        z     = x.10^(x.15*inv(x.16))
    
     8. gy    = x.10^inv(x.11)
        x     = x.11
        z     = x.10
    
     9. gy    = x.10^inv(x.11)
        x     = inv(x.15)
        z     = x.10^inv((x.11*x.15))
    
    10. gy    = x.10^inv(x.11)
        x     = (x.11*x.15)
        z     = x.10^x.15
    
    11. gy    = x.10^inv(x.11)
        x     = (x.15*inv(x.16))
        z     = x.10^(x.15*inv((x.11*x.16)))
    
    12. gy    = x.10^inv((x.11*x.12))
        x     = x.11
        z     = x.10^inv(x.12)
    
    13. gy    = x.10^inv((x.11*x.12))
        x     = (x.11*x.16)
        z     = x.10^(x.16*inv(x.12))
    
    14. gy    = x.10^inv((x.11*x.12))
        x     = (x.11*x.16*inv(x.17))
        z     = x.10^(x.16*inv((x.12*x.17)))
    
    15. gy    = x.10^inv((x.11*x.12))
        x     = (x.11*inv(x.16))
        z     = x.10^inv((x.12*x.16))
    
    16. gy    = x.10^(x.11*x.12)
        x     = inv(x.11)
        z     = x.10^x.12
    
    17. gy    = x.10^(x.11*x.12)
        x     = inv((x.11*x.16))
        z     = x.10^(x.12*inv(x.16))
    
    18. gy    = x.10^(x.11*x.12)
        x     = (x.16*inv(x.11))
        z     = x.10^(x.12*x.16)
    
    19. gy    = x.10^(x.11*x.12)
        x     = (x.16*inv((x.11*x.17)))
        z     = x.10^(x.12*x.16*inv(x.17))
    
    20. gy    = x.10^(x.11*x.12*inv(x.13))
        x     = inv((x.11*x.17))
        z     = x.10^(x.12*inv((x.13*x.17)))
    
    21. gy    = x.10^(x.11*x.12*inv(x.13))
        x     = (x.13*x.17*inv(x.11))
        z     = x.10^(x.12*x.17)
    
    22. gy    = x.10^(x.11*x.12*inv(x.13))
        x     = (x.13*x.17*inv((x.11*x.18)))
        z     = x.10^(x.12*x.17*inv(x.18))
    
    23. gy    = x.10^(x.11*x.12*inv(x.13))
        x     = (x.13*inv(x.11))
        z     = x.10^x.12
    
    24. gy    = x.10^(x.11*x.12*inv(x.13))
        x     = (x.13*inv((x.11*x.17)))
        z     = x.10^(x.12*inv(x.17))
    
    25. gy    = x.10^(x.11*x.12*inv(x.13))
        x     = (x.17*inv((x.11*x.18)))
        z     = x.10^(x.12*x.17*inv((x.13*x.18)))
    
    26. gy    = x.10^(x.11*x.12*inv((x.13*x.14)))
        x     = (x.13*x.18*inv(x.11))
        z     = x.10^(x.12*x.18*inv(x.14))
    
    27. gy    = x.10^(x.11*x.12*inv((x.13*x.14)))
        x     = (x.13*x.18*inv((x.11*x.19)))
        z     = x.10^(x.12*x.18*inv((x.14*x.19)))
    
    28. gy    = x.10^(x.11*x.12*inv((x.13*x.14)))
        x     = (x.13*inv(x.11))
        z     = x.10^(x.12*inv(x.14))
    
    29. gy    = x.10^(x.11*x.12*inv((x.13*x.14)))
        x     = (x.13*inv((x.11*x.18)))
        z     = x.10^(x.12*inv((x.14*x.18)))
    
    30. gy    = x.10^(x.11*inv(x.12))
        x     = x.12
        z     = x.10^x.11
    
    31. gy    = x.10^(x.11*inv(x.12))
        x     = inv(x.16)
        z     = x.10^(x.11*inv((x.12*x.16)))
    
    32. gy    = x.10^(x.11*inv(x.12))
        x     = inv((x.11*x.16))
        z     = x.10^inv((x.12*x.16))
    
    33. gy    = x.10^(x.11*inv(x.12))
        x     = (x.12*x.16)
        z     = x.10^(x.11*x.16)
    
    34. gy    = x.10^(x.11*inv(x.12))
        x     = (x.12*x.16*inv(x.11))
        z     = x.10^x.16
    
    35. gy    = x.10^(x.11*inv(x.12))
        x     = (x.12*x.16*inv((x.11*x.17)))
        z     = x.10^(x.16*inv(x.17))
    
    36. gy    = x.10^(x.11*inv(x.12))
        x     = (x.12*inv(x.11))
        z     = x.10
    
    37. gy    = x.10^(x.11*inv(x.12))
        x     = (x.12*inv((x.11*x.16)))
        z     = x.10^inv(x.16)
    
    38. gy    = x.10^(x.11*inv(x.12))
        x     = (x.16*inv(x.17))
        z     = x.10^(x.11*x.16*inv((x.12*x.17)))
    
    39. gy    = x.10^(x.11*inv(x.12))
        x     = (x.16*inv((x.11*x.17)))
        z     = x.10^(x.16*inv((x.12*x.17)))
    
    40. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = x.12
        z     = x.10^(x.11*inv(x.13))
    
    41. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = (x.12*x.17)
        z     = x.10^(x.11*x.17*inv(x.13))
    
    42. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = (x.12*x.17*inv(x.11))
        z     = x.10^(x.17*inv(x.13))
    
    43. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = (x.12*x.17*inv(x.18))
        z     = x.10^(x.11*x.17*inv((x.13*x.18)))
    
    44. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = (x.12*x.17*inv((x.11*x.18)))
        z     = x.10^(x.17*inv((x.13*x.18)))
    
    45. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = (x.12*inv(x.11))
        z     = x.10^inv(x.13)
    
    46. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = (x.12*inv(x.17))
        z     = x.10^(x.11*inv((x.13*x.17)))
    
    47. gy    = x.10^(x.11*inv((x.12*x.13)))
        x     = (x.12*inv((x.11*x.17)))
        z     = x.10^inv((x.13*x.17))
  */

rule (modulo E) A_Send_mac_gy:
   [ St_A_2( A, id, B, k, x, s, $p, gy, Kab ) ]
  --[ Running( A, B, <'R', 'I', map(s, $p)^x, gy, Kab> ) ]->
   [
   St_A_3( A, id, B, k, x, s, $p, gy, Kab ),
   Out( mac(<'I', 'R', gy>, Kab) )
   ]

  /*
  rule (modulo AC) A_Send_mac_gy:
     [ St_A_2( A, id, B, k, x, s, $p, gy, Kab ) ]
    --[ Running( A, B, <'R', 'I', z, gy, Kab> ) ]->
     [
     St_A_3( A, id, B, k, x, s, $p, gy, Kab ),
     Out( senc(<'I', 'R', gy>, Kab) )
     ]
    variants (modulo AC)
    1. $p    = $p.22
       s     = s.29
       x     = one
       z     = map(s.29, $p.22)
    
    2. $p    = $p.23
       s     = s.30
       x     = x.31
       z     = map(s.30, $p.23)^x.31
  */

rule (modulo E) B_Rec_mac_gy:
   [
   St_B_2( B, id, A, k, gx, s, $p, y, Kab ),
   In( mac(<'I', 'R', map(s, $p)^y>, Kab) )
   ]
  --[
  Commit( B, A, <'R', 'I', gx, map(s, $p)^y, Kab> ), Honest( B ),
  Honest( A ), Secret( B, Kab )
  ]->
   [ St_B_3( B, id, A, k, gx, s, $p, y, Kab ) ]

  /*
  rule (modulo AC) B_Rec_mac_gy:
     [
     St_B_2( B, id, A, k, gx, s, $p, y, Kab ),
     In( senc(<'I', 'R', z>, Kab) )
     ]
    --[
    Commit( B, A, <'R', 'I', gx, z, Kab> ), Honest( B ), Honest( A ),
    Secret( B, Kab )
    ]->
     [ St_B_3( B, id, A, k, gx, s, $p, y, Kab ) ]
    variants (modulo AC)
    1. $p    = $p.22
       s     = s.29
       y     = one
       z     = map(s.29, $p.22)
    
    2. $p    = $p.23
       s     = s.30
       y     = y.31
       z     = map(s.30, $p.23)^y.31
  */

rule (modulo E) B_Send_mac_gx:
   [ St_B_3( B, id, A, k, gx, s, $p, y, Kab ) ]
  --[ Finish( B, A, 'R', k, gx, map(s, $p)^y, Kab ) ]->
   [
   St_B_4( B, id, A, k, gx, s, $p, y, Kab ),
   Out( mac(<'R', 'I', gx>, Kab) )
   ]

  /*
  rule (modulo AC) B_Send_mac_gx:
     [ St_B_3( B, id, A, k, gx, s, $p, y, Kab ) ]
    --[ Finish( B, A, 'R', k, gx, z, Kab ) ]->
     [
     St_B_4( B, id, A, k, gx, s, $p, y, Kab ),
     Out( senc(<'R', 'I', gx>, Kab) )
     ]
    variants (modulo AC)
    1. $p    = $p.27
       s     = s.34
       y     = one
       z     = map(s.34, $p.27)
    
    2. $p    = $p.28
       s     = s.35
       y     = y.36
       z     = map(s.35, $p.28)^y.36
  */

rule (modulo E) A_Rec_mac_gx:
   [
   St_A_3( A, id, B, k, x, s, $p, gy, Kab ),
   In( mac(<'R', 'I', map(s, $p)^x>, Kab) )
   ]
  --[
  Commit( A, B, <'I', 'R', map(s, $p)^x, gy, Kab> ), Honest( A ),
  Honest( B ), Finish( A, B, 'I', k, map(s, $p)^x, gy, Kab ),
  Secret( A, Kab )
  ]->
   [ St_A_4( A, id, B, k, x, s, $p, gy, Kab ) ]

  /*
  rule (modulo AC) A_Rec_mac_gx:
     [
     St_A_3( A, id, B, k, x, s, $p, gy, Kab ),
     In( senc(<'R', 'I', z>, Kab) )
     ]
    --[
    Commit( A, B, <'I', 'R', z, gy, Kab> ), Honest( A ), Honest( B ),
    Finish( A, B, 'I', k, z, gy, Kab ), Secret( A, Kab )
    ]->
     [ St_A_4( A, id, B, k, x, s, $p, gy, Kab ) ]
    variants (modulo AC)
    1. $p    = $p.22
       s     = s.29
       x     = one
       z     = map(s.29, $p.22)
    
    2. $p    = $p.23
       s     = s.30
       x     = x.31
       z     = map(s.30, $p.23)^x.31
  */

lemma executable:
  exists-trace
  "∃ a b gx gy k Kab #i #j.
    (((((Finish( a, b, 'I', k, gx, gy, Kab ) @ #i) ∧
        (Finish( b, a, 'R', k, gx, gy, Kab ) @ #j)) ∧
       (∀ id1 id2 #k1 #k2.
         ((Create( id1, 'I' ) @ #k1) ∧ (Create( id2, 'I' ) @ #k2)) ⇒
         (id1 = id2))) ∧
      (∀ id1 id2 #k1 #k2.
        ((Create( id1, 'R' ) @ #k1) ∧ (Create( id2, 'R' ) @ #k2)) ⇒
        (id1 = id2))) ∧
     (¬(a = b))) ∧
    (¬(∃ X #k.1. Reveal( X ) @ #k.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b gx gy k Kab #i #j.
  (Finish( a, b, 'I', k, gx, gy, Kab ) @ #i) ∧
  (Finish( b, a, 'R', k, gx, gy, Kab ) @ #j)
 ∧
  (∀ id1 id2 #k1 #k2.
    (Create( id1, 'I' ) @ #k1) ∧ (Create( id2, 'I' ) @ #k2)
   ⇒
    id1 = id2) ∧
  (∀ id1 id2 #k1 #k2.
    (Create( id1, 'R' ) @ #k1) ∧ (Create( id2, 'R' ) @ #k2)
   ⇒
    id1 = id2) ∧
  (¬(a = b)) ∧
  (∀ X #k.1. (Reveal( X ) @ #k.1) ⇒ ⊥)"
*/
simplify
solve( Finish( a, b, 'I', k, gx, gy, Kab ) @ #i )
  case A_Rec_mac_gx
  solve( St_A_3( a, id, b, k, x, s, $p, gy, Kab ) ▶₀ #i )
    case A_Send_mac_gy
    solve( Finish( $B, $A, 'R', ~k, map(~s, $p)^~x, gy, h(z) ) @ #j )
      case B_Send_mac_gx
      solve( St_B_3( $B, id.1, $A, ~k, map(~s, $p)^~x, s.1, $p.1, y, h(z)
             ) ▶₀ #j )
        case B_Rec_mac_gy
        solve( !KU( senc(<'R', 'I', map(~s, $p)^~x>,
                         h(map(~s, $p)^(~x*~y)))
               ) @ #vk )
          case B_Send_mac_gx
          solve( !KU( senc(<'I', 'R', map(~s, $p)^~y>,
                           h(map(~s, $p)^(~x*~y)))
                 ) @ #vk.2 )
            case A_Send_mac_gy
            solve( !KU( map(~s, $p)^~x ) @ #vk.4 )
              case A_Send_gx_s_p
              solve( !KU( senc(~s, h(~k)) ) @ #vk.6 )
                case A_Send_gx_s_p
                solve( !KU( map(~s, $p)^~y ) @ #vk.5 )
                  case B_Send_gy
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_Rec_mac_gx
  solve( St_A_3( a, id, b, k, x, s, $p, gy, Kab ) ▶₀ #i )
    case A_Send_mac_gy
    solve( !KU( senc(<'R', 'I', map(~s, $p)^~x>, h(z)) ) @ #vk )
      case B_Send_mac_gx
      solve( !KU( senc(<'I', 'R', map(s.1, $p.1)^~y>,
                       h(map(~s, $p)^(~x*~y)))
             ) @ #vk.2 )
        case A_Send_mac_gy
        solve( !KU( senc(~s, h(~k.1)) ) @ #vk.6 )
          case A_Send_gx_s_p
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'I', 'R', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case A_Rec_mac_gx
              solve( St_A_3( a2, id.1, b2, k.1, ~x, ~s, $p, map(~s, $p)^~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case A_Send_mac_gy
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'I', 'R', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case A_Rec_mac_gx
              solve( St_A_3( a2, id.1, b2, k.1, ~x, ~s, $p, map(~s, $p)^~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case A_Send_mac_gy
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.8 )
            case A_Send_gx_s_p
            solve( !KU( ~k ) @ #vk.11 )
              case Reveal_pskA
              by contradiction /* from formulas */
            next
              case Reveal_pskB
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(map(~s, $p)^(~x*~y)) ) @ #vk.9 )
          case c_h
          solve( !KU( map(~s, $p)^(~x*~y) ) @ #vk.14 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x ) @ #vk.18 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~x ) @ #vk.14 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.17 )
          qed
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.1 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_2
        solve( !KU( h(gy^~x) ) @ #vk.3 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.8 )
            case A_Send_gx_s_p_case_1
            solve( !KU( map(~s, $p) ) @ #vk.3 )
              case A_Send_gx_s_p
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case B_Send_gy
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.8 )
                case A_Send_gx_s_p
                solve( !KU( ~k ) @ #vk.11 )
                  case Reveal_pskA
                  by contradiction /* from formulas */
                next
                  case Reveal_pskB
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case B_Send_gy
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.3 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.8 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_Send_gx_s_p_case_2
            solve( !KU( map(~s, $p)^x.1 ) @ #vk.3 )
              case A_Send_gx_s_p_case_1
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case A_Send_gx_s_p_case_2
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_Send_gx_s_p_case_3
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case A_Send_gx_s_p_case_4
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case A_Send_gx_s_p_case_5
              by solve( !KU( ~x ) @ #vk.14 )
            next
              case B_Send_gy_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_Send_gy_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case B_Send_gy_case_3
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_Send_gy_case_4
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_Send_gy_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              solve( !KU( map(~s, $p) ) @ #vk.10 )
                case A_Send_gx_s_p
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case B_Send_gy
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case A_Send_gx_s_p
                  solve( !KU( ~k ) @ #vk.14 )
                    case Reveal_pskA
                    by contradiction /* from formulas */
                  next
                    case Reveal_pskB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case A_Send_gx_s_p_case_5
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case A_Send_gx_s_p_case_6
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~x ) @ #vk.15 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case B_Send_gy_case_5
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.11 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.1 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_3
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_4
          by solve( !KU( ~x.2 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_Send_gy_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_Send_gy_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.1 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.1 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case A_Send_gx_s_p_case_3
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_4
          by solve( !KU( ~x.3 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.15 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_Send_gy_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_Send_gy_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_Rec_mac_gy
  solve( St_B_2( a, id, b, k, gx, s, $p, y, Kab ) ▶₀ #i )
    case B_Send_gy
    solve( !KU( senc(<'I', 'R', map(s, $p)^~y>, h(z)) ) @ #vk )
      case A_Send_mac_gy
      solve( !KU( senc(s, h(~k)) ) @ #vk.4 )
        case A_Send_gx_s_p
        solve( !KU( map(~s, $p)^~x ) @ #vk.3 )
          case A_Send_gx_s_p_case_1
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'R', 'I', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case B_Rec_mac_gy
              solve( St_B_2( a2, id.1, b2, k.1, map(~s, $p)^~x, ~s, $p, ~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case B_Send_gy
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'R', 'I', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case B_Rec_mac_gy
              solve( St_B_2( a2, id.1, b2, k.1, map(~s, $p)^~x, ~s, $p, ~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case B_Send_gy
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case B_Send_gy
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.8 )
        qed
      next
        case A_Send_mac_gy
        solve( !KU( map(<'I', 'R', ~k^inv(~x)>, $p)^~x.1 ) @ #vk.3 )
          case B_Send_gy
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x.1 ) @ #vk.9 )
        qed
      next
        case B_Send_mac_gx
        solve( !KU( map(<'R', 'I', ~k^inv(~y)>, $p)^~x ) @ #vk.3 )
          case B_Send_gy
          by solve( !KU( ~x ) @ #vk.15 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.14 )
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.8 )
          case c_h
          solve( !KU( ~k ) @ #vk.9 )
            case Reveal_pskA
            by contradiction /* from formulas */
          next
            case Reveal_pskB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~k)) ) @ #vk.4 )
        case A_Send_gx_s_p
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.7 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.12 )
              case A_Send_gx_s_p
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_Send_gy_case_1
              solve( !KU( map(~s, $p) ) @ #vk.6 )
                case A_Send_gx_s_p
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case B_Send_gy
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.12 )
                  case A_Send_gx_s_p
                  solve( !KU( ~k ) @ #vk.14 )
                    case Reveal_pskA
                    by contradiction /* from formulas */
                  next
                    case Reveal_pskB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_Send_gy_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.13 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.4 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.7 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.12 )
              case A_Send_gx_s_p_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_Send_gx_s_p_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case A_Send_gx_s_p_case_3
              by solve( !KU( ~x.2 ) @ #vk.16 )
            next
              case A_Send_gx_s_p_case_4
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case A_Send_gx_s_p_case_5
              by solve( !KU( ~x.3 ) @ #vk.17 )
            next
              case B_Send_gy_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_Send_gy_case_2
              solve( !KU( map(~s, $p)^x ) @ #vk.6 )
                case A_Send_gx_s_p_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case A_Send_gx_s_p_case_2
                by solve( !KU( ~x ) @ #vk.15 )
              next
                case A_Send_gx_s_p_case_3
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case A_Send_gx_s_p_case_4
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case A_Send_gx_s_p_case_5
                by solve( !KU( ~x.2 ) @ #vk.18 )
              next
                case B_Send_gy_case_1
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case B_Send_gy_case_2
                by solve( !KU( ~y ) @ #vk.19 )
              next
                case B_Send_gy_case_3
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_Send_gy_case_4
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_Send_gy_case_5
                by solve( !KU( ~y.1 ) @ #vk.19 )
              next
                case c_exp
                solve( !KU( map(~s, $p) ) @ #vk.14 )
                  case A_Send_gx_s_p
                  by solve( !KU( ~x.1 ) @ #vk.16 )
                next
                  case B_Send_gy
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.15 )
                    case A_Send_gx_s_p
                    solve( !KU( ~k ) @ #vk.17 )
                      case Reveal_pskA
                      by contradiction /* from formulas */
                    next
                      case Reveal_pskB
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_Send_gy_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case B_Send_gy_case_4
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_Send_gy_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_Send_gy_case_6
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.15 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.2 ) @ #vk.16 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.3 ) @ #vk.16 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.17 )
          qed
        qed
      next
        case A_Send_mac_gy
        solve( !KU( ~k^inv(~x) ) @ #vk.12 )
          case c_exp
          solve( !KU( ~k ) @ #vk.13 )
            case Reveal_pskA
            by contradiction /* from formulas */
          next
            case Reveal_pskB
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_Send_mac_gx
        solve( !KU( senc(<'I', 'R', map(s, $p.1)^~y>, h(~k)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~k) ) @ #vk.20 )
            case c_h
            solve( !KU( ~k ) @ #vk.22 )
              case Reveal_pskA
              by contradiction /* from formulas */
            next
              case Reveal_pskB
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.13 )
          case c_h
          solve( !KU( ~k ) @ #vk.14 )
            case Reveal_pskA
            by contradiction /* from formulas */
          next
            case Reveal_pskB
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_Rec_mac_gx
  solve( St_A_3( A, id, B, k, x, s, $p, gy, x.1 ) ▶₀ #i )
    case A_Send_mac_gy
    solve( !KU( senc(<'R', 'I', map(~s, $p)^~x>, h(z)) ) @ #vk.1 )
      case B_Send_mac_gx
      solve( !KU( h(map(~s, $p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(~s, $p)^(~x*~y) ) @ #vk.9 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y.1 ) @ #vk.13 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_2
        solve( !KU( h(gy^~x) ) @ #vk.1 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.8 )
            case A_Send_gx_s_p_case_1
            solve( !KU( map(~s, $p) ) @ #vk.3 )
              case A_Send_gx_s_p
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case B_Send_gy
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.8 )
                case A_Send_gx_s_p
                solve( !KU( ~k ) @ #vk.11 )
                  case Reveal_pskA
                  by contradiction /* from formulas */
                next
                  case Reveal_pskB
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case B_Send_gy
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.1 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.8 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_Send_gx_s_p_case_2
            solve( !KU( map(~s, $p)^x.1 ) @ #vk.3 )
              case A_Send_gx_s_p_case_1
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case A_Send_gx_s_p_case_2
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_Send_gx_s_p_case_3
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case A_Send_gx_s_p_case_4
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case A_Send_gx_s_p_case_5
              by solve( !KU( ~x ) @ #vk.14 )
            next
              case B_Send_gy_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_Send_gy_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case B_Send_gy_case_3
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_Send_gy_case_4
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_Send_gy_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              solve( !KU( map(~s, $p) ) @ #vk.10 )
                case A_Send_gx_s_p
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case B_Send_gy
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case A_Send_gx_s_p
                  solve( !KU( ~k ) @ #vk.14 )
                    case Reveal_pskA
                    by contradiction /* from formulas */
                  next
                    case Reveal_pskB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case A_Send_gx_s_p_case_5
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case A_Send_gx_s_p_case_6
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~x ) @ #vk.15 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case B_Send_gy_case_5
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.11 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_3
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_4
          by solve( !KU( ~x.2 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_Send_gy_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_Send_gy_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case A_Send_gx_s_p_case_3
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_4
          by solve( !KU( ~x.3 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.15 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_Send_gy_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_Send_gy_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    qed
  qed
next
  case B_Rec_mac_gy
  solve( St_B_2( A, id, A.1, k, gx, s, $p, y, x ) ▶₀ #i )
    case B_Send_gy
    solve( !KU( senc(<'I', 'R', map(s, $p)^~y>, h(z)) ) @ #vk.1 )
      case A_Send_mac_gy
      solve( !KU( h(map(s, $p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(s, $p)^(~x*~y) ) @ #vk.8 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.1 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y.1 ) @ #vk.13 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~k)) ) @ #vk.5 )
        case A_Send_gx_s_p
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.3 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.12 )
              case A_Send_gx_s_p
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_Send_gy_case_1
              solve( !KU( map(~s, $p) ) @ #vk.6 )
                case A_Send_gx_s_p
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case B_Send_gy
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.12 )
                  case A_Send_gx_s_p
                  solve( !KU( ~k ) @ #vk.14 )
                    case Reveal_pskA
                    by contradiction /* from formulas */
                  next
                    case Reveal_pskB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_Send_gy_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.13 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.3 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.12 )
              case A_Send_gx_s_p_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_Send_gx_s_p_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case A_Send_gx_s_p_case_3
              by solve( !KU( ~x.2 ) @ #vk.16 )
            next
              case A_Send_gx_s_p_case_4
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case A_Send_gx_s_p_case_5
              by solve( !KU( ~x.3 ) @ #vk.17 )
            next
              case B_Send_gy_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_Send_gy_case_2
              solve( !KU( map(~s, $p)^x ) @ #vk.6 )
                case A_Send_gx_s_p_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case A_Send_gx_s_p_case_2
                by solve( !KU( ~x ) @ #vk.15 )
              next
                case A_Send_gx_s_p_case_3
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case A_Send_gx_s_p_case_4
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case A_Send_gx_s_p_case_5
                by solve( !KU( ~x.2 ) @ #vk.18 )
              next
                case B_Send_gy_case_1
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case B_Send_gy_case_2
                by solve( !KU( ~y ) @ #vk.19 )
              next
                case B_Send_gy_case_3
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_Send_gy_case_4
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_Send_gy_case_5
                by solve( !KU( ~y.1 ) @ #vk.19 )
              next
                case c_exp
                solve( !KU( map(~s, $p) ) @ #vk.14 )
                  case A_Send_gx_s_p
                  by solve( !KU( ~x.1 ) @ #vk.16 )
                next
                  case B_Send_gy
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.15 )
                    case A_Send_gx_s_p
                    solve( !KU( ~k ) @ #vk.17 )
                      case Reveal_pskA
                      by contradiction /* from formulas */
                    next
                      case Reveal_pskB
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_Send_gy_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case B_Send_gy_case_4
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_Send_gy_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_Send_gy_case_6
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.15 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.2 ) @ #vk.16 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.3 ) @ #vk.16 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.17 )
          qed
        qed
      next
        case A_Send_mac_gy
        solve( !KU( ~k^inv(~x) ) @ #vk.12 )
          case c_exp
          solve( !KU( ~k ) @ #vk.13 )
            case Reveal_pskA
            by contradiction /* from formulas */
          next
            case Reveal_pskB
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_Send_mac_gx
        solve( !KU( senc(<'I', 'R', map(s, $p.1)^~y>, h(~k)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~k) ) @ #vk.20 )
            case c_h
            solve( !KU( ~k ) @ #vk.22 )
              case Reveal_pskA
              by contradiction /* from formulas */
            next
              case Reveal_pskB
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.13 )
          case c_h
          solve( !KU( ~k ) @ #vk.14 )
            case Reveal_pskA
            by contradiction /* from formulas */
          next
            case Reveal_pskB
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_PFS:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_Rec_mac_gx
  solve( St_A_3( A, id, B, k, x, s, $p, gy, x.1 ) ▶₀ #i )
    case A_Send_mac_gy
    solve( !KU( senc(<'R', 'I', map(~s, $p)^~x>, h(z)) ) @ #vk.1 )
      case B_Send_mac_gx
      solve( !KU( h(map(~s, $p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(~s, $p)^(~x*~y) ) @ #vk.9 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y.1 ) @ #vk.13 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_2
        solve( !KU( h(gy^~x) ) @ #vk.1 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.8 )
            case A_Send_gx_s_p_case_1
            solve( !KU( map(~s, $p) ) @ #vk.3 )
              case A_Send_gx_s_p
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case B_Send_gy
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.8 )
                case A_Send_gx_s_p
                solve( !KU( ~k ) @ #vk.11 )
                  case Reveal_pskA
                  by contradiction /* from formulas */
                next
                  case Reveal_pskB
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case B_Send_gy
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.1 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.8 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_Send_gx_s_p_case_2
            solve( !KU( map(~s, $p)^x.1 ) @ #vk.3 )
              case A_Send_gx_s_p_case_1
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case A_Send_gx_s_p_case_2
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_Send_gx_s_p_case_3
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case A_Send_gx_s_p_case_4
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case A_Send_gx_s_p_case_5
              by solve( !KU( ~x ) @ #vk.14 )
            next
              case B_Send_gy_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_Send_gy_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case B_Send_gy_case_3
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_Send_gy_case_4
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_Send_gy_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              solve( !KU( map(~s, $p) ) @ #vk.10 )
                case A_Send_gx_s_p
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case B_Send_gy
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case A_Send_gx_s_p
                  solve( !KU( ~k ) @ #vk.14 )
                    case Reveal_pskA
                    by contradiction /* from formulas */
                  next
                    case Reveal_pskB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case A_Send_gx_s_p_case_5
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case A_Send_gx_s_p_case_6
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~x ) @ #vk.15 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case B_Send_gy_case_5
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.11 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_3
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_4
          by solve( !KU( ~x.2 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_Send_gy_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_Send_gy_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.2 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case A_Send_gx_s_p_case_3
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case A_Send_gx_s_p_case_4
          by solve( !KU( ~x.3 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.15 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_Send_gy_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_Send_gy_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    qed
  qed
next
  case B_Rec_mac_gy
  solve( St_B_2( A, id, A.1, k, gx, s, $p, y, x ) ▶₀ #i )
    case B_Send_gy
    solve( !KU( senc(<'I', 'R', map(s, $p)^~y>, h(z)) ) @ #vk.1 )
      case A_Send_mac_gy
      solve( !KU( h(map(s, $p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(s, $p)^(~x*~y) ) @ #vk.8 )
          case A_Send_gx_s_p_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case A_Send_gx_s_p_case_2
          by solve( !KU( ~x.1 ) @ #vk.12 )
        next
          case B_Send_gy_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case B_Send_gy_case_2
          by solve( !KU( ~y.1 ) @ #vk.13 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~k)) ) @ #vk.5 )
        case A_Send_gx_s_p
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.3 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.12 )
              case A_Send_gx_s_p
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_Send_gy_case_1
              solve( !KU( map(~s, $p) ) @ #vk.6 )
                case A_Send_gx_s_p
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case B_Send_gy
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.12 )
                  case A_Send_gx_s_p
                  solve( !KU( ~k ) @ #vk.14 )
                    case Reveal_pskA
                    by contradiction /* from formulas */
                  next
                    case Reveal_pskB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_Send_gy_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.13 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.3 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.12 )
              case A_Send_gx_s_p_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_Send_gx_s_p_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case A_Send_gx_s_p_case_3
              by solve( !KU( ~x.2 ) @ #vk.16 )
            next
              case A_Send_gx_s_p_case_4
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case A_Send_gx_s_p_case_5
              by solve( !KU( ~x.3 ) @ #vk.17 )
            next
              case B_Send_gy_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_Send_gy_case_2
              solve( !KU( map(~s, $p)^x ) @ #vk.6 )
                case A_Send_gx_s_p_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case A_Send_gx_s_p_case_2
                by solve( !KU( ~x ) @ #vk.15 )
              next
                case A_Send_gx_s_p_case_3
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case A_Send_gx_s_p_case_4
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case A_Send_gx_s_p_case_5
                by solve( !KU( ~x.2 ) @ #vk.18 )
              next
                case B_Send_gy_case_1
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case B_Send_gy_case_2
                by solve( !KU( ~y ) @ #vk.19 )
              next
                case B_Send_gy_case_3
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_Send_gy_case_4
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_Send_gy_case_5
                by solve( !KU( ~y.1 ) @ #vk.19 )
              next
                case c_exp
                solve( !KU( map(~s, $p) ) @ #vk.14 )
                  case A_Send_gx_s_p
                  by solve( !KU( ~x.1 ) @ #vk.16 )
                next
                  case B_Send_gy
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.15 )
                    case A_Send_gx_s_p
                    solve( !KU( ~k ) @ #vk.17 )
                      case Reveal_pskA
                      by contradiction /* from formulas */
                    next
                      case Reveal_pskB
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_Send_gy_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case B_Send_gy_case_4
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_Send_gy_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_Send_gy_case_6
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.15 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.2 ) @ #vk.16 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 )
            case A_Send_gx_s_p_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case A_Send_gx_s_p_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case A_Send_gx_s_p_case_3
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case A_Send_gx_s_p_case_4
            by solve( !KU( ~x.3 ) @ #vk.16 )
          next
            case B_Send_gy_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case B_Send_gy_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case B_Send_gy_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_Send_gy_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.17 )
          qed
        qed
      next
        case A_Send_mac_gy
        solve( !KU( ~k^inv(~x) ) @ #vk.12 )
          case c_exp
          solve( !KU( ~k ) @ #vk.13 )
            case Reveal_pskA
            by contradiction /* from formulas */
          next
            case Reveal_pskB
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_Send_mac_gx
        solve( !KU( senc(<'I', 'R', map(s, $p.1)^~y>, h(~k)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~k) ) @ #vk.20 )
            case c_h
            solve( !KU( ~k ) @ #vk.22 )
              case Reveal_pskA
              by contradiction /* from formulas */
            next
              case Reveal_pskB
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.13 )
          case c_h
          solve( !KU( ~k ) @ #vk.14 )
            case Reveal_pskA
            by contradiction /* from formulas */
          next
            case Reveal_pskB
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end